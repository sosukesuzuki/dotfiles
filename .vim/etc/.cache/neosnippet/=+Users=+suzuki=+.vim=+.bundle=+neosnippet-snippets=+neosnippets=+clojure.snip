{try:{word:"try",options:{word:0,oneshot:0,indent:0,head:0},snip:"(try\n\t\t${1}\n\t\t(catch ${2:Exception} e ${3:nil}))",description:"(try\n\t\t${1}\n\t\t(catch ${2:Exception} e ${3:nil}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:9,menu_template:"(try ... (catch ...",real_name:"try",action__pattern:"^snippet\\s\\+try$",menu_abbr:"(try ... (catch ..."},shebang:{word:"shebang",options:{word:0,oneshot:0,indent:0,head:1},snip:"#^:shebang '[\n\texec java -cp \\`locate clojure- | grep -P \"clojure-[\\\\d\\\\.]+\\\\.jar$\" | tail -1\\` clojure.main \"\\$0\"\n\t]\n\t",description:"#^:shebang '[\n\texec java -cp \\`locate clojure- | grep -P \"clojure-[\\\\d\\\\.]+\\\\.jar$\" | tail -1\\` clojure.main \"\\$0\"\n\t]\n\t",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:22,menu_template:"#^:shebang '[  exec java -cp \\`locate clojure- | grep -P \"clojure-[\\\\d\\\\.]+\\\\.jar$\" | tail -1\\` clojure.main \"\\$0\"  ]  ",real_name:"shebang",action__pattern:"^snippet\\s\\+shebang$",menu_abbr:"#^:shebang '[  exec java -cp \\`locate clojure- | grep -P \"clojure-[\\\\d\\\\.]+\\\\.jar$\" | tail -1\\` clojure.main \"\\$0\"  ]  "},"require-core-match":{word:"require-core-match",options:{word:0,oneshot:0,indent:0,head:1},snip:"(ns ${1:example}\n(:require [clojure.core.match :as m]))\n; vim: set lispwords+=m/match :",description:"(ns ${1:example}\n(:require [clojure.core.match :as m]))\n; vim: set lispwords+=m/match :",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:44,menu_template:"(ns ${1:example} (:require [clojure.core.match :as m])) ; vim: set lispwords+=m/match :",real_name:"require-core-match",action__pattern:"^snippet\\s\\+require-core-match$",menu_abbr:"(ns ${1:example} (:require [clojure.core.match :as m])) ; vim: set lispwords+=m/match :"},"java-methods":{word:"java-methods",options:{word:0,oneshot:0,indent:0,head:1},snip:"(:members (clojure.reflect/refrect ${1}))${0}",description:"(:members (clojure.reflect/refrect ${1}))${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:95,menu_template:"(:members (clojure.reflect/refrect ${1}))${0}",real_name:"java-methods",action__pattern:"^snippet\\s\\+java-methods$",menu_abbr:"(:members (clojure.reflect/refrect ${1}))${0}"},"defn-doc":{word:"defn-doc",options:{word:0,oneshot:0,indent:0,head:1},snip:"(defn ${1:name}\n\t\t\"${2:doc}\"\n\t\t[${3}]\n\t\t${0})",description:"(defn ${1:name}\n\t\t\"${2:doc}\"\n\t\t[${3}]\n\t\t${0})",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:1,menu_template:"defn function \"...\" [...] ...",real_name:"defn-doc",action__pattern:"^snippet\\s\\+defn-doc$",menu_abbr:"defn function \"...\" [...] ..."},ns:{word:"ns",options:{word:0,oneshot:0,indent:0,head:1},snip:"(ns ${1:`substitute(substitute(substitute(expand('%:p:r'), '.*/\\(src\\|test\\)/', '', ''), '/', '.', 'g'), '_', '-', 'g')`}\n(:require `expand('%:r') =~ '_test$' ? '[clojure.test :refer :all]' : ''`${2:}))",description:"(ns ${1:`substitute(substitute(substitute(expand('%:p:r'), '.*/\\(src\\|test\\)/', '', ''), '/', '.', 'g'), '_', '-', 'g')`}\n(:require `expand('%:r') =~ '_test$' ? '[clojure.test :refer :all]' : ''`${2:}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:81,menu_template:"(ns ${1:`substitute(substitute(substitute(expand('%:p:r'), '.*/\\(src\\|test\\)/', '', ''), '/', '.', 'g'), '_', '-', 'g')`} (:require `expand('%:r') =~ '_test$' ? '[clojure.test :refer :all]' : ''`${2:}))",real_name:"ns",action__pattern:"^snippet\\s\\+ns$",menu_abbr:"(ns ${1:`substitute(substitute(substitute(expand('%:p:r'), '.*/\\(src\\|test\\)/', '', ''), '/', '.', 'g'), '_', '-', 'g')`} (:require `expand('%:r') =~ '_test$' ? '[clojure.test :refer :all]' : ''`${2:}))"},warn:{word:"warn",options:{word:0,oneshot:0,indent:0,head:1},snip:"(binding [*out* *err*]\n(println ${0:TARGET}))",description:"(binding [*out* *err*]\n(println ${0:TARGET}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:29,menu_template:"(binding [*out* *err*] (println ${0: }))",real_name:"warn",action__pattern:"^snippet\\s\\+warn$",menu_abbr:"(binding [*out* *err*] (println ${0: }))"},deftype:{word:"deftype",options:{word:0,oneshot:0,indent:0,head:1},snip:"(defrecord ${1:type} [${2:constructor-args}]\n${3:protocol} (${3:method} [${5}] ${6}))",description:"(defrecord ${1:type} [${2:constructor-args}]\n${3:protocol} (${3:method} [${5}] ${6}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:39,menu_template:"(defrecord ${1:type} [${2:constructor-args}] ${3:protocol} (${3:method} [${5}] ${6}))",real_name:"deftype",action__pattern:"^snippet\\s\\+deftype$",menu_abbr:"(defrecord ${1:type} [${2:constructor-args}] ${3:protocol} (${3:method} [${5}] ${6}))"},"dir-glob":{word:"dir-glob",options:{word:0,oneshot:0,indent:0,head:1},snip:"[org.clojars.hozumi/clj-glob \"0.1.2\"]\n(:require [org.satta.glob :as g])\n(g/glob \"${0:TARGET}\")",description:"[org.clojars.hozumi/clj-glob \"0.1.2\"]\n(:require [org.satta.glob :as g])\n(g/glob \"${0:TARGET}\")",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:60,menu_template:"[org.clojars.hozumi/clj-glob \"0.1.2\"] (:require [org.satta.glob :as g]) (g/glob \"${0: }\")",real_name:"dir-glob",action__pattern:"^snippet\\s\\+dir-glob$",menu_abbr:"[org.clojars.hozumi/clj-glob \"0.1.2\"] (:require [org.satta.glob :as g]) (g/glob \"${0: }\")"},private:{word:"private",options:{word:1,oneshot:0,indent:0,head:0},snip:"@#'${0}",description:"@#'${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:91,menu_template:"@#'${0}",real_name:"private",action__pattern:"^snippet\\s\\+private$",menu_abbr:"@#'${0}"},sleep:{word:"sleep",options:{word:0,oneshot:0,indent:0,head:0},snip:"(Thread/sleep ${1})${0}",description:"(Thread/sleep ${1})${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:66,menu_template:"(Thread/sleep ${1})${0}",real_name:"sleep",action__pattern:"^snippet\\s\\+sleep$",menu_abbr:"(Thread/sleep ${1})${0}"},deftest:{word:"deftest",options:{word:0,oneshot:0,indent:0,head:1},snip:"(deftest ${1:a}-test\n(testing \"${2:hello}\"\n${0:TARGET:(is (= 0 1))}))",description:"(deftest ${1:a}-test\n(testing \"${2:hello}\"\n${0:TARGET:(is (= 0 1))}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:50,menu_template:"(deftest ${1:a}-test (testing \"${2:hello}\" ${0: :(is (= 0 1))}))",real_name:"deftest",action__pattern:"^snippet\\s\\+deftest$",menu_abbr:"(deftest ${1:a}-test (testing \"${2:hello}\" ${0: :(is (= 0 1))}))"},bench:{word:"bench",options:{word:0,oneshot:0,indent:0,head:0},snip:"(let [bench-before (System/currentTimeMillis)]\n${1:TARGET}\n(prn 'Took (- (System/currentTimeMillis) bench-before) 'msec))",description:"(let [bench-before (System/currentTimeMillis)]\n${1:TARGET}\n(prn 'Took (- (System/currentTimeMillis) bench-before) 'msec))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:86,menu_template:"(let [bench-before (System/currentTimeMillis)] ${1: } (prn 'Took (- (System/currentTimeMillis) bench-before) 'msec))",real_name:"bench",action__pattern:"^snippet\\s\\+bench$",menu_abbr:"(let [bench-before (System/currentTimeMillis)] ${1: } (prn 'Took (- (System/currentTimeMillis) bench-before) 'msec))"},"use-strint-in-ns":{word:"use-strint-in-ns",options:{word:0,oneshot:0,indent:0,head:1},snip:"(:require [clojure.core.strint :refer (<<)])${0}",description:"(:require [clojure.core.strint :refer (<<)])${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:56,menu_template:"(:require [clojure.core.strint :refer (<<)])${0}",real_name:"use-strint-in-ns",action__pattern:"^snippet\\s\\+use-strint-in-ns$",menu_abbr:"(:require [clojure.core.strint :refer (<<)])${0}"},"ref-set":{word:"ref-set",options:{word:0,oneshot:0,indent:0,head:1},snip:"(dosync\n\t\t(ref-set ${1:ref} ${2:value}))",description:"(dosync\n\t\t(ref-set ${1:ref} ${2:value}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:15,menu_template:"(dosync (ref-set ...",real_name:"ref-set",action__pattern:"^snippet\\s\\+ref-set$",menu_abbr:"(dosync (ref-set ..."},defrecord:{word:"defrecord",options:{word:0,oneshot:0,indent:0,head:1},snip:"(defrecord ${1:record} [${2:constructor-args}]\n${3:protocol} (${3:method} [${5}] ${6}))",description:"(defrecord ${1:record} [${2:constructor-args}]\n${3:protocol} (${3:method} [${5}] ${6}))",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:34,menu_template:"(defrecord ${1:record} [${2:constructor-args}] ${3:protocol} (${3:method} [${5}] ${6}))",real_name:"defrecord",action__pattern:"^snippet\\s\\+defrecord$",menu_abbr:"(defrecord ${1:record} [${2:constructor-args}] ${3:protocol} (${3:method} [${5}] ${6}))"},defproejct:{word:"defproejct",options:{word:0,oneshot:0,indent:0,head:1},snip:"(defproject ${1:aaa} \"0.1-SNAPSHOT\"\n\t  :description \"FIXME: write description\"\n\t  :url \"https://github.com/${2}\"\n\t  :license {:name \"GNU GPL v3+\"\n\t            :url \"http://www.gnu.org/licenses/gpl-3.0.en.html\"}\n\t  :dependencies [[org.clojure/clojure \"1.7.0\"]]\n\t  :main ^:skip-aot ${3:aaa.core}\n\t  :target-path \"target/%s\"\n\t  :min-lein-version \"2.3.0\")",description:"(defproject ${1:aaa} \"0.1-SNAPSHOT\"\n\t  :description \"FIXME: write description\"\n\t  :url \"https://github.com/${2}\"\n\t  :license {:name \"GNU GPL v3+\"\n\t            :url \"http://www.gnu.org/licenses/gpl-3.0.en.html\"}\n\t  :dependencies [[org.clojure/clojure \"1.7.0\"]]\n\t  :main ^:skip-aot ${3:aaa.core}\n\t  :target-path \"target/%s\"\n\t  :min-lein-version \"2.3.0\")",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/clojure.snip",action__line:69,menu_template:"(defproject ${1:aaa} \"0.1-SNAPSHOT\"  :description \"FIXME: write description\"  :url \"https://github.com/${2}\"  :license {:name \"GNU GPL v3+\"  :url \"http://www.gnu.org/licenses/gpl-3.0.en.html\"}  :dependencies [[org.clojure/clojure \"1.7.0\"]]  :main ^:skip-aot ${3:aaa.core}  : -path \" /%s\"  :min-lein-version \"2.3.0\")",real_name:"defproejct",action__pattern:"^snippet\\s\\+defproejct$",menu_abbr:"(defproject ${1:aaa} \"0.1-SNAPSHOT\"  :description \"FIXME: write description\"  :url \"https://github.com/${2}\"  :license {:name \"GNU GPL v3+\"  :url \"http://www.gnu.org/licenses/gpl-3.0.en.html\"}  :dependencies [[org.clojure/clojure \"1.7.0\"]]  :main ^:skip-aot ${3:aaa.core}  : -path \" /%s\"  :min-lein-version \"2.3.0\")"}}
