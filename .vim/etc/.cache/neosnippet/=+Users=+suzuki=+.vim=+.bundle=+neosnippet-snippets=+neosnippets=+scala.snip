{"should-scalatest":{word:"should-scalatest",options:{word:1,oneshot:0,indent:0,head:0},snip:"should \"${1}\" in {\n\t\t${0:TARGET}\n\t}",description:"should \"${1}\" in {\n\t\t${0:TARGET}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:72,menu_template:"should \"${1}\" in {  ${0: }  }",real_name:"should-scalatest",action__pattern:"^snippet\\s\\+should-scalatest$",menu_abbr:"should \"${1}\" in {  ${0: }  }"},try:{word:"try",options:{word:0,oneshot:0,indent:0,head:1},snip:"try {\n\t\t${1:TARGET}\n\t} catch {\n\t\tcase e${2:: Exception} => ${0}\n\t}",description:"try {\n\t\t${1:TARGET}\n\t} catch {\n\t\tcase e${2:: Exception} => ${0}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:11,menu_template:"try {} catch { case ... }",real_name:"try",action__pattern:"^snippet\\s\\+try$",menu_abbr:"try {} catch { case ... }"},"akka-actor":{word:"akka-actor",options:{word:0,oneshot:0,indent:0,head:1},snip:"import akka.actor.{ActorSystem, Actor, ActorLogging, Props}\n\n\tobject ${1:X} {\n\t\tdef props(${2}) = Props(new X($2))\n\t}\n\n\tclass $1($2) extends Actor with ActorLogging {\n\t\tdef receive = {\n\t\t\tcase e =>\n\t\t\t\t${0:TARGET:println(e)}\n\t\t}\n\t}",description:"import akka.actor.{ActorSystem, Actor, ActorLogging, Props}\n\n\tobject ${1:X} {\n\t\tdef props(${2}) = Props(new X($2))\n\t}\n\n\tclass $1($2) extends Actor with ActorLogging {\n\t\tdef receive = {\n\t\t\tcase e =>\n\t\t\t\t${0:TARGET:println(e)}\n\t\t}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:78,menu_template:"import akka.actor.{ActorSystem, Actor, ActorLogging, Props}   object ${1:X} {  def props(${2}) = Props(new X($2))  }   class $1($2) extends Actor with ActorLogging {  def receive = {  case e =>  ${0: :println(e)}  }  }",real_name:"akka-actor",action__pattern:"^snippet\\s\\+akka-actor$",menu_abbr:"import akka.actor.{ActorSystem, Actor, ActorLogging, Props}   object ${1:X} {  def props(${2}) = Props(new X($2))  }   class $1($2) extends Actor with ActorLogging {  def receive = {  case e =>  ${0: :println(e)}  }  }"},if:{word:"if",options:{word:0,oneshot:0,indent:0,head:0},snip:"if (${1}) {\n\t\t${2}\n\t}${3: else}",description:"if (${1}) {\n\t\t${2}\n\t}${3: else}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:25,menu_template:"if (${1}) {  ${2}  }${3: else}",real_name:"if",action__pattern:"^snippet\\s\\+if$",menu_abbr:"if (${1}) {  ${2}  }${3: else}"},pf:{word:"pf",options:{word:0,oneshot:0,indent:0,head:0},snip:"_ = println(${1})${0}",description:"_ = println(${1})${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:38,menu_template:"p in for",real_name:"pf",action__pattern:"^snippet\\s\\+pf$",menu_abbr:"p in for"},cclass:{word:"cclass",options:{word:0,oneshot:0,indent:0,head:1},snip:"case class ${1}(${2}: ${0})",description:"case class ${1}(${2}: ${0})",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:97,menu_template:"case class ..(..: ..)",real_name:"cclass",action__pattern:"^snippet\\s\\+cclass$",menu_abbr:"case class ..(..: ..)"},pn:{word:"pn",options:{word:0,oneshot:0,indent:0,head:0},snip:"println('${1:#:name}, $1)${0}",description:"println('${1:#:name}, $1)${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:34,menu_template:"println('name, name)",real_name:"pn",action__pattern:"^snippet\\s\\+pn$",menu_abbr:"println('name, name)"},hello:{word:"hello",options:{word:0,oneshot:0,indent:0,head:1},snip:"object ${1:`expand('%:t:r') ==# '' ? 'HelloWorld' : expand('%:t:r')`} {\n\t\tdef main(args: Array[String]) {\n\t\t\tprintln(\"Hello, world!\")\n\t\t}\n\t}",description:"object ${1:`expand('%:t:r') ==# '' ? 'HelloWorld' : expand('%:t:r')`} {\n\t\tdef main(args: Array[String]) {\n\t\t\tprintln(\"Hello, world!\")\n\t\t}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:51,menu_template:"object HelloWorld { def main(...) }",real_name:"hello",action__pattern:"^snippet\\s\\+hello$",menu_abbr:"object HelloWorld { def main(...) }"},match:{word:"match",options:{word:0,oneshot:0,indent:0,head:0},snip:"match {\n\t\tcase ${1} => ${0}\n\t}",description:"match {\n\t\tcase ${1} => ${0}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:1,menu_template:"match {\\n  case .. => ..",real_name:"match",action__pattern:"^snippet\\s\\+match$",menu_abbr:"match {\\n  case .. => .."},main:{word:"main",options:{word:0,oneshot:0,indent:0,head:1},snip:"object ${1:`expand('%:t:r') ==# '' ? 'HelloWorld' : expand('%:t:r')`} {\n\t\tdef main(args: Array[String]) {\n\t\t\t${0:TARGET}\n\t\t}\n\t}",description:"object ${1:`expand('%:t:r') ==# '' ? 'HelloWorld' : expand('%:t:r')`} {\n\t\tdef main(args: Array[String]) {\n\t\t\t${0:TARGET}\n\t\t}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:42,menu_template:"def main(args: Array[String]) {",real_name:"main",action__pattern:"^snippet\\s\\+main$",menu_abbr:"def main(args: Array[String]) {"},p:{word:"p",options:{word:0,oneshot:0,indent:0,head:0},snip:"println(${1})${0}",description:"println(${1})${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:30,menu_template:"println()",real_name:"p",action__pattern:"^snippet\\s\\+p$",menu_abbr:"println()"},for:{word:"for",options:{word:0,oneshot:0,indent:0,head:0},snip:"for {\n\t\t${1}\n\t} yield ${2}",description:"for {\n\t\t${1}\n\t} yield ${2}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:20,menu_template:"for {  ${1}  } yield ${2}",real_name:"for",action__pattern:"^snippet\\s\\+for$",menu_abbr:"for {  ${1}  } yield ${2}"},case:{word:"case",options:{word:0,oneshot:0,indent:0,head:0},snip:"case ${1} => ${0}",description:"case ${1} => ${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:7,menu_template:"case .. => ..",real_name:"case",action__pattern:"^snippet\\s\\+case$",menu_abbr:"case .. => .."},package:{word:"package",options:{word:0,oneshot:0,indent:0,head:1},snip:"package `substitute(substitute(expand('%:h'), '.*\\<src/\\(main\\|test\\)/scala/', '', ''), '/', '.', 'g')`${0}",description:"package `substitute(substitute(expand('%:h'), '.*\\<src/\\(main\\|test\\)/scala/', '', ''), '/', '.', 'g')`${0}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:93,menu_template:"package `substitute(substitute(expand('%:h'), '.*\\<src/\\(main\\|test\\)/scala/', '', ''), '/', '.', 'g')`${0}",real_name:"package",action__pattern:"^snippet\\s\\+package$",menu_abbr:"package `substitute(substitute(expand('%:h'), '.*\\<src/\\(main\\|test\\)/scala/', '', ''), '/', '.', 'g')`${0}"},class:{word:"class",options:{word:0,oneshot:0,indent:0,head:1},snip:"class ${1:X()} {\n\t\t${0:TARGET}\n\t}",description:"class ${1:X()} {\n\t\t${0:TARGET}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:66,menu_template:"class ${1:X()} {  ${0: }  }",real_name:"class",action__pattern:"^snippet\\s\\+class$",menu_abbr:"class ${1:X()} {  ${0: }  }"},object:{word:"object",options:{word:0,oneshot:0,indent:0,head:1},snip:"object ${1:X} {\n\t\t${0:TARGET}\n\t}",description:"object ${1:X} {\n\t\t${0:TARGET}\n\t}",action__path:"/Users/suzuki/.vim/.bundle/neosnippet-snippets/neosnippets/scala.snip",action__line:60,menu_template:"object ${1:X} {  ${0: }  }",real_name:"object",action__pattern:"^snippet\\s\\+object$",menu_abbr:"object ${1:X} {  ${0: }  }"}}
