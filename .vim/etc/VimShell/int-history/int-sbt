jetty
ãƒ»
container:start
browse
scti
jetty;start
sbt
2
def head[A](xs: List[A]): A = xs (0)
head (1 :: 2 :: Nil)
case class Car(make: String)
trait Plus[A] {}
 map {identity} assert_=== List(1, 2, 3)
Monad
Functor
xit
nsole
consple
import org.json4s.DSL._
import org.json4s._
compact(render(List(1, 2, 3)))
sbt console
import org.json4s.
map {identity} assert_=== List(1, 2, 3)
:t render
ompact(render(List(1, 2, 3)))
dentity} assert_=== List(1, 2, 3
val json = List(1, 2, 3)
render(json)
t compact
import org.json4s.native.JsonMethods._
:t compact
fuck
compile
console
import org.json4s.jackson.JsonMethods._
val json
= List(1, 2, 3)
asJValue(json)
asJValue(3)
:asJVakue
:t asJValue
:t asJValue(3)
asJValue[List[Int]](json)
import org.json4s.JsonDSL._
compact(render(json))
:q
exit
etty:start 
jetty:start
r
