package com.disney.api

import org.jsoup._
import scala.collection.mutable._
/**
  * Created by suzuki on 2016/10/25.
  */

object DisneyApiModule {

  //グローバル変数のこういう使い方はまあ正義
  val attractionNameList = ListBuffer[String] (
    " ビックサンダー・マウンテン  ",
    " モンスターズインク  ",
    " プーさんのハニーハント  ",
    " スティッチ・エンカウンター  ",
    " スプラッシュ・マウンテン  ",
    " ジャングルクルーズ：ワイルドライフ・エクスペディション  ",
    " バズ・ライトイヤー  ",
    " ミッキーの家とミート・ミッキー  ",
    " スターツアーズ  ",
    " スペースマウンテン  ",
    " ホーンテッドマンション  ",
    " カリブの海賊  ",
    " ミッキーのフォルハーマジック  ",
    " イッツ・ア・スモールワールド  ",
    " ピーターパン空の旅  ",
    " シンデレラのフェアリーテイル・ホール  ",
    " ガジェットのゴーコースター  ",
    " ロジャーラビットのカートゥーンスピン  ",
    " ウエスタンリバー鉄道  ",
    " 魅惑のチキルーム  ",
    " グランドサーキット・レースウェイ  ",
    " 空飛ぶダンボ  ",
    " 白雪姫と七人のこびと  ",
    " グーフィーのペイント＆プレイハウス  ",
    " スタージェット  ",
    " ウエスタンランド・シューティングギャラリー  ",
    " ピノキオの冒険旅行  ",
    " アリスのティーパーティー  ",
    " ミニーの家  ",
    " 蒸気船マークトウェイン号  ",
    " カヌー探検  ",
    " ドナルドのボート  ",
    " トムソーヤ島いかだ  ",
    " キャッスルカルーセル  ",
    " カントリーベア・シアター  ",
    " チップとデールのツリーハウス  ",
    " オムニバス  ",
    " トイ・ストーリー・マニア！  ",
    " タワー・オブ・テラー  ",
    " センター・オブ・ジ・アース  ",
    " インディージョーンズ  ",
    " レイジングスピリッツ  ",
    " タートル・トーク  ",
    " マーメイドラグーンシアター  ",
    " 海底2万マイル  ",
    " アクアトピア  ",
    " マジックランプシアター  ",
    " ヴェネツィアン・ゴンドラ  ",
    " アリエルグリーティング  ",
    " シンドバッド・ストーリーブック・ヴォヤッジ  ",
    " ジャスミンのフライングカーペット  ",
    " フライングフィッシュコースター  ",
    " フォートレス・エクスプロレーション  ",
    " トランジットスチーマーライン(ロストリバーデルタ)  ",
    " スカットルのスクーター  ",
    " エレクトリックレールウェイ(ポートディスカバリー)  ",
    " ワールプール  ",
    " キャラバンカルーセル  ",
    " ジャンピン・ジェリーフィッシュ  ",
    " ビッグシティ・ヴィークル  ",
    " ブローフィッシュ・バルーンレース  ",
    " アラビアンコースト  ",
    " ディズニーシー･プラザ  ",
    " サルードス・アミーゴス!”グリーティングドック  ",
    " ミッキー&amp;フレンズ･グリーティングトレイル(グーフィー)  ",
    " ミッキー&amp;フレンズ･グリーティングトレイル(ミニーマウス)  ",
    " ヴィレッジ・グリーティングプレイス  ",
    " トランジットスチーマーライン(アメリカンウォーターフロント)  ",
    " エレクトリックレールウェイ(アメリカンウォーターフロント)  ",
    " トランジットスチーマーライン(メディテレーニアンハーバー)  ",
    " ミッキー&amp;フレンズ･グリーティングトレイル(ミッキーマウス)  ",
    " ウォーターフロントパーク  ",
    " ホライズンベイ・レストラン（キャラクターダイニング）  "
    )


  //ランドかシーかと、取得する情報の種類を指定してHTMLからタグを除いた文字列を取得します。
  def getWaitTimesHtml(park: String, kind: String): String = {
    getMatchingHtml(park, kind)
  }

  def getWaitTimesAttractionCaseClass(park: String, kind: String): ListBuffer[Attraction] ={
    getAttraction(htmlToArrayString(getMatchingHtml(park,)) )
  }

  

  //指定のURLのHTMLをタグ部分を覗いて文字列として返す補助メソッドです。
  private def getHtml(url: String):String = {
    val html = Jsoup.connect(url).get.getElementsByClass("realtime_item").html().replaceAll("<.+?>","")
    return html
  }

  //指定のパークの指定の種類の情報を取得します
  private def getMatchingHtml(park: String, kind: String): String ={
    if(park == "sea" || park == "land"){
      kind match {
        case "attraction" =>
          return getHtml("http://tokyodisneyresort.info/realtime.php?park=" + park)

        case "greeting" =>
          return getHtml("http://tokyodisneyresort.info/greeting_realtime.php?park=" + park)

        case "restaurant" =>
          return getHtml("http://tokyodisneyresort.info/restwait.php?park=" + park)
      }
    } else {
      return "parkにseaかlandを指定してください"
    }
  }

  //改行ごとに分割する補助メソッド
  private def htmlToArrayString(html:String): Array[String] ={
    html split("\n")
  }

  //アトラクションの名前と待ち時間と更新時間などの文字列からケースクラスのリストにして返すよ
  def getAttraction(html: Array[String]): ListBuffer[Attraction] = {
    val attractionList: ListBuffer[Attraction] = ListBuffer[Attraction]()
    var name:String = null
    var waitTimes: String = null
    var updateTimes: String = null

    for(element <- html) {
      if (isAttractionName(element)) {
        name = element
      } else if (isWaitTimes(element)) {
        waitTimes = element
      } else if (isUpdateTimes(element)) {
        updateTimes = element
      }

      if(name != null && waitTimes != null && updateTimes != null){
        attractionList+=(new Attraction(name, waitTimes, updateTimes))
        name = null
        waitTimes = null
        updateTimes = null
      } else if(name != null && waitTimes == null && updateTimes != null){
        attractionList+=(new Attraction(name, "None", updateTimes))
        name = null
        updateTimes = null
      } else if(name == null && waitTimes == null && updateTimes != null){
        attractionList+= new Attraction("None", "None", updateTimes)
        updateTimes = null
      }

    }


    return attractionList
  }


  //引数の文字列がアトラクションの名前であるかどうかを判定する。
  def isAttractionName(element:String): Boolean = {
    attractionNameList.contains(element)
  }

  //"分"が含まれているかどうかで待ち時間の値かどうかを判断する。
  private def isWaitTimes(element:String): Boolean = {
    element.contains("分")
  }

  //更新の更か閉園の閉で更新時間を表すフィールドかどうか判定します。
  private def isUpdateTimes(element:String):Boolean = {
    if(element.contains("更") || element.contains("閉") || element.contains("休")){
      return true
    } else {
      return false
    }
  }



}


case class Attraction(name: String,waitTimes: String,updateTimes: String)
case class Greeting (name: String,waitTimes: String, updateTimes: String)

object AttractionData {
  val seaAttractionsData = DisneyApiModule.getWaitTimesAttractionCaseClass("sea", "attraction").toList
  val landAttractionData = DisneyApiModule.getWaitTimesAttractionCaseClass("land", "attraction").toList

}


